# SPDX-FileCopyrightText: 2023-2024 City of Espoo
#
# SPDX-License-Identifier: LGPL-2.1-or-later

name: Build
on:
  push:
  schedule:
    - cron: "30 1 * * 1" # At 01:30 on Monday

env:
  AWS_REGION: eu-north-1
  ECR_REGISTRY: 767398123997.dkr.ecr.eu-north-1.amazonaws.com
  DOCKER_PULL: "${{ github.ref == 'refs/heads/master' && 'true' || 'false' }}"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

jobs:
  lint-shell:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: espoon-voltti/voltti-actions/shellcheck@master

  check-licenses:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Reuse Compliance Check
        uses: fsfe/reuse-action@v5

  cache-bust:
    runs-on: ubuntu-latest
    steps:
      - name: "Cache bust"
        id: cache-bust
        run: echo "cache-bust=$(date '+%Y-W%V')" >> "$GITHUB_OUTPUT"
    outputs:
      cache-bust: ${{ steps.cache-bust.outputs.cache-bust }}

  dockerize:
    runs-on: ubuntu-latest
    needs:
      - cache-bust
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: luontotieto/service
            path: service
            test: "false"
          - name: luontotieto/frontend
            path: frontend
            test: "true"
          - name: luontotieto/api-gateway
            path: api-gateway
            test: "true"
          - name: luontotieto/geoserver
            path: geoserver
            test: "false"

    steps:
      - uses: actions/checkout@v5

      - name: Build image
        uses: espoon-voltti/voltti-actions/docker-build-push@master
        id: build
        with:
          path: ${{ matrix.path }}
          pull: ${{ env.DOCKER_PULL }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE }}
          AWS_REGION: ${{ env.AWS_REGION }}
          registry: ${{ env.ECR_REGISTRY }}
          name: ${{ matrix.name }}
          build-args: |
            CACHE_BUST=${{ needs.cache-bust.outputs.cache-bust }}
            build=${{ github.run_number }}
            commit=${{ github.sha }}

      - name: Run tests
        if: ${{ matrix.test == 'true' }}
        uses: espoon-voltti/voltti-actions/docker-build-push@master
        id: test
        with:
          path: ${{ matrix.path }}
          push: false
          target: "test"
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE }}
          AWS_REGION: ${{ env.AWS_REGION }}
          registry: ${{ env.ECR_REGISTRY }}
          name: ${{ matrix.name }}-tests
          build-args: |
            CACHE_BUST=${{ needs.cache-bust.outputs.cache-bust }}
            build=${{ github.run_number }}
            commit=${{ github.sha }}

  service-builder:
    runs-on: ubuntu-latest
    needs:
      - cache-bust
    env:
      name: luontotieto/service
      path: service
      builder: builder

    steps:
      - uses: actions/checkout@v5

      - name: Build builder
        uses: espoon-voltti/voltti-actions/docker-build-push@master
        id: builder
        with:
          path: ${{ env.path }}
          pull: ${{ env.DOCKER_PULL }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE }}
          AWS_REGION: ${{ env.AWS_REGION }}
          registry: ${{ env.ECR_REGISTRY }}
          name: ${{ env.name }}-${{ env.builder }}
          build-args: |
            CACHE_BUST=${{ needs.cache-bust.outputs.cache-bust }}
            build=${{ github.run_number }}
            commit=${{ github.sha }}
          target: ${{ env.builder }}
    outputs:
      builder_image: ${{ steps.builder.outputs.image }}
      builder_image_name: ${{ steps.builder.outputs.image_name }}

  owasp:
    if: ${{ (github.actor != 'dependabot[bot]' && github.actor != 'renovate[bot]') }}
    needs:
      - service-builder
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-duration-seconds: 1200

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Cache dependency check database
        uses: actions/cache@v4
        with:
          path: dependency-check-data
          key: dependency-check-data-${{ github.run_id }}-${{ github.run_attempt }}
          restore-keys: |
            dependency-check-data-

      - name: Update OWASP database
        shell: bash
        run: |
          docker run --rm \
              -e NVD_API_KEY=${{ secrets.NVD_API_KEY }} \
              -v $(pwd)/dependency-check-data:/root/.gradle/dependency-check-data \
              ${{ needs.service-builder.outputs.builder_image }} \
              ./gradlew --no-daemon dependencyCheckUpdate

      - name: Force caching dependency-check-data # If job fails cache is not saved without this
        uses: actions/cache/save@v4
        with:
          path: dependency-check-data
          key: dependency-check-data-${{ github.run_id }}-${{ github.run_attempt }}

      - name: Run service OWASP tests
        shell: bash
        run: |
          docker run --rm \
              -e NVD_API_KEY=${{ secrets.NVD_API_KEY }} \
              -v $(pwd)/dependency-check-data:/root/.gradle/dependency-check-data \
              ${{ needs.service-builder.outputs.builder_image }} \
              ./gradlew --no-daemon dependencyCheckAnalyze

  test:
    runs-on: ubuntu-latest
    needs: service-builder
    env:
      BUILD: "false"
      TAG: "${{ github.event.pull_request.head.sha || github.sha }}"

    defaults:
      run:
        working-directory: compose

    steps:
      - uses: actions/checkout@v5

      - name: Configure AWS credentials
        if: ${{ (github.actor != 'dependabot[bot]' && github.actor != 'renovate[bot]') && !github.event.pull_request.head.repo.fork }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-duration-seconds: 1200

      - name: Login to Amazon ECR
        if: ${{ (github.actor != 'dependabot[bot]' && github.actor != 'renovate[bot]') && !github.event.pull_request.head.repo.fork }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Pull images
        if: ${{ (github.actor != 'dependabot[bot]' && github.actor != 'renovate[bot]') && !github.event.pull_request.head.repo.fork }}
        run: |
          ./test-compose pull

      - name: Build images
        if: ${{ github.actor == 'dependabot[bot]' || github.event.pull_request.head.repo.fork }}
        run: |
          ./test-compose build --parallel

      - name: Run tests
        run: |
          set -o pipefail
          ./test-compose run service-tests | tee tests.log

      - name: Get logs
        if: always()
        run: |
          ./test-compose logs > tests-all.log

      - name: Store logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            compose/tests.log
            compose/tests-all.log
          retention-days: 2

  e2e-test:
    runs-on: ubuntu-latest
    needs:
      - service-builder
      - dockerize
    env:
      BUILD: "false"
      TAG: "${{ github.event.pull_request.head.sha || github.sha }}"

    defaults:
      run:
        working-directory: compose

    steps:
      - uses: actions/checkout@v5

      - name: Configure AWS credentials
        if: ${{ (github.actor != 'dependabot[bot]' && github.actor != 'renovate[bot]') && !github.event.pull_request.head.repo.fork }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-duration-seconds: 1200

      - name: Login to Amazon ECR
        if: ${{ (github.actor != 'dependabot[bot]' && github.actor != 'renovate[bot]') && !github.event.pull_request.head.repo.fork }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Pull images
        if: ${{ (github.actor != 'dependabot[bot]' && github.actor != 'renovate[bot]') && !github.event.pull_request.head.repo.fork }}
        run: |
          ./e2e-test-compose pull

      - name: Build images
        if: ${{ github.actor == 'dependabot[bot]' || github.actor == 'renovate[bot]' || github.event.pull_request.head.repo.fork }}
        run: |
          ./e2e-test-compose build --parallel

      - name: Start dependencies
        run: |
          ./e2e-test-compose up -d luontotieto-db redis paikkatieto-db s3-mock geoserver frontend api-gateway

      - name: Run e2e tests
        run: |
          set -o pipefail
          ./e2e-test-compose up --exit-code-from service-e2e-tests service-e2e-tests | tee tests.log

      - name: Get logs
        if: always()
        run: |
          ./e2e-test-compose logs > tests-all.log

      - name: Store logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            compose/tests.log
            compose/tests-all.log
          retention-days: 2

  deploy:
    # if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    needs:
      - dockerize
    strategy:
      fail-fast: false
      matrix:
        environment:
          - staging
          - prod
    environment:
      name: ${{ matrix.environment }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-duration-seconds: 1200

      - name: Retag
        run: |
          for repository in service frontend api-gateway geoserver; do
            if [ "$(aws ecr describe-images --repository-name "luontotieto/$repository" --image-ids imageTag="${{ github.event.pull_request.head.sha || github.sha }}" | jq -r '.imageDetails[].imageTags | index("env-${{ matrix.environment }}")')" = "null" ]; then
              MANIFEST=$(aws ecr batch-get-image --repository-name "luontotieto/$repository" --image-ids imageTag="${{ github.event.pull_request.head.sha || github.sha }}" --output json | jq --raw-output --join-output '.images[0].imageManifest')
              aws ecr put-image --repository-name "luontotieto/$repository" --image-tag "env-${{ matrix.environment }}" --image-manifest "$MANIFEST"
            else
              echo "env-tag on image already exists on luontotieto/$repository"
            fi
          done

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ENVIRONMENT }}
          role-duration-seconds: 1200
          unset-current-credentials: true

      - name: Deploy
        run: |
          aws ecs update-service \
            --cluster "luontotieto-${{ matrix.environment }}" \
            --service "luontotieto-${{ matrix.environment }}" \
            --force-new-deployment
          aws ecs update-service \
            --cluster "luontotieto-${{ matrix.environment }}" \
            --service "geoserver-${{ matrix.environment }}" \
            --force-new-deployment
          aws ecs wait services-stable \
            --cluster "luontotieto-${{ matrix.environment }}" \
            --services "luontotieto-${{ matrix.environment }}" "geoserver-${{ matrix.environment }}"
